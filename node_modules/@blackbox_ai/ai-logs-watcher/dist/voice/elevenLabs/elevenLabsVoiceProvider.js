// src/voice/elevenLabs/elevenLabsVoiceProvider.ts
import { AilogwVoiceProvider } from "../AilogwVoiceProvider.js";
import { ElevenLabsClient } from "@elevenlabs/elevenlabs-js";
import { checkEnvs } from "../../utils.js";
import { AilogwException, IncompleteConfig } from "../../exceptions/index.js";
var ElevenLabsVoiceProvider = class extends AilogwVoiceProvider {
  client;
  agents = void 0;
  constructor(config) {
    const missingEnv = checkEnvs(
      [
        "ELEVENLABS_API_KEY",
        "AILOGW_TWILIO_ACCOUNT_SID",
        "AILOGW_TWILIO_AUTH_TOKEN",
        "AILOGW_NUMBER_FROM",
        "AILOGW_ALERT_AGENT_ID",
        "AILOGW_GITHUB_AGENT_ID"
      ]
    );
    if (missingEnv)
      throw new IncompleteConfig(`Missing ${missingEnv} in environment`);
    super({ ...config, provider: "elevenLabs" });
    this.client = new ElevenLabsClient({ apiKey: this.credentials.apiKey });
  }
  /** here we declare a method to fetch the pre-configured agents from eleven labs,
   * the response will be later cached (in prepareCall method) for this class instance
   * @throws `AilogwException` - if we failed to get a response
  */
  async fetchAgents() {
    const agentIds = [process.env.AILOGW_ALERT_AGENT_ID, process.env.AILOGW_GITHUB_AGENT_ID];
    try {
      const response = await Promise.all(
        agentIds.map((id) => this.client.conversationalAi.agents.get(id))
      );
      return { "alert": response[0], "github": response[1] };
    } catch (e) {
      console.error(e);
      throw new AilogwException(`Failed to fetch ${agentIds.length} agents`);
    }
  }
  /**
   * Prepares a voice call with the provided alert message and target number.
   * Returns a function that can be called to execute the prepared call.
   * 
   * @param alertMessage - The alert message to be spoken during the call
   * @param toNumber - The phone number to call (should include country code)
   * @param context - Optional context information to provide to the agent. If provided, the agent will be informed that this is all available information.
   * @returns Function that executes the prepared call
   */
  async prepareCall(alertMessage, toNumber, context) {
    const AILOGW_TWILIO_ACCOUNT_SID = process.env.AILOGW_TWILIO_ACCOUNT_SID;
    const AILOGW_TWILIO_AUTH_TOKEN = process.env.AILOGW_TWILIO_AUTH_TOKEN;
    const AILOGW_NUMBER_FROM = process.env.AILOGW_NUMBER_FROM;
    let agentPhoneNumberId;
    const prepareResources = async () => {
      if (!this.agents) {
        this.agents = await this.fetchAgents();
      }
      const phoneRes = await this.client.conversationalAi.phoneNumbers.create({
        provider: "twilio",
        phoneNumber: AILOGW_NUMBER_FROM,
        sid: AILOGW_TWILIO_ACCOUNT_SID,
        token: AILOGW_TWILIO_AUTH_TOKEN,
        label: `Ailogw outbound from ${AILOGW_NUMBER_FROM}`
      });
      agentPhoneNumberId = phoneRes.phoneNumberId;
      return {
        diagnostic: `Alert log: ${alertMessage}

`,
        namespace: context?.namespace || "(namespace details unavailable)",
        context: (() => {
          const { namespace: namespace2, ...rest } = context;
          return rest;
        })()
      };
    };
    const { namespace, diagnostic, context: preparedContext } = await prepareResources();
    if (!this.agents)
      throw new AilogwException(`Unexpected error: agents undefined`);
    const serializedContext = Object.keys(preparedContext).length != 0 ? JSON.stringify(preparedContext, null, 2).slice(1, -1) : "(no extra context available at this moment)";
    const agentId = this.agents.alert.agentId;
    return async () => {
      try {
        const outboundCallBody = {
          agentId,
          agentPhoneNumberId,
          toNumber,
          // We pass the dynamic variables we prepared earlier
          conversationInitiationClientData: {
            dynamicVariables: {
              namespace,
              diagnostic,
              context: serializedContext
            }
          }
        };
        const callRes = await this.client.conversationalAi.twilio.outboundCall(outboundCallBody);
        return {
          success: callRes.success,
          callId: callRes.callSid || callRes.conversationId,
          message: callRes.message || `Call initiated successfully. Agent: ${agentId}, Phone: ${agentPhoneNumberId}`
        };
      } catch (error) {
        return {
          success: false,
          error: error instanceof Error ? error.message : String(error)
        };
      }
    };
  }
};
export {
  ElevenLabsVoiceProvider
};
