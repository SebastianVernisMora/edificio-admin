// usuarios.js - Gestión de usuarios

/**
 * Función global para mostrar detalles de permisos en un modal
 * @param {Object} permisos - Objeto con los permisos del usuario
 */
function showPermisosDetails(permisos) {
    // Crear modal dinámicamente si no existe
    let permisosModal = document.getElementById('permisosDetalleModal');
    
    if (!permisosModal) {
        const modalHTML = `
            <div class="modal fade" id="permisosDetalleModal" tabindex="-1" aria-labelledby="permisosDetalleModalLabel" aria-hidden="true">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header bg-light">
                            <h5 class="modal-title" id="permisosDetalleModalLabel">
                                <i class="bi bi-shield-check me-2"></i> Detalles de Permisos
                            </h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                        </div>
                        <div class="modal-body" id="permisosDetalleBody">
                            <!-- Contenido dinámico -->
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                        </div>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHTML);
        permisosModal = document.getElementById('permisosDetalleModal');
    }
    
    // Configurar contenido del modal
    const permisosBody = document.getElementById('permisosDetalleBody');
    
    // Definir todos los permisos posibles con sus descripciones
    const permisosConfig = [
        { key: 'anuncios', icon: 'bi-megaphone', title: 'Gestión de Anuncios', description: 'Puede crear, editar y eliminar anuncios', color: 'primary' },
        { key: 'gastos', icon: 'bi-credit-card', title: 'Gestión de Gastos', description: 'Puede registrar y administrar gastos', color: 'success' },
        { key: 'presupuestos', icon: 'bi-calculator', title: 'Gestión de Presupuestos', description: 'Puede crear y administrar presupuestos', color: 'warning' },
        { key: 'cuotas', icon: 'bi-cash-coin', title: 'Gestión de Cuotas', description: 'Puede gestionar cuotas y pagos', color: 'info' },
        { key: 'usuarios', icon: 'bi-people', title: 'Gestión de Usuarios', description: 'Puede administrar usuarios del sistema', color: 'danger' },
        { key: 'cierres', icon: 'bi-journal-check', title: 'Gestión de Cierres', description: 'Puede realizar cierres contables', color: 'secondary' }
    ];
    
    // Calcular número de permisos activos
    const permisosActivos = permisosConfig.filter(config => permisos[config.key]).length;
    
    // Generar resumen de permisos
    let permisosHTML = `
        <div class="alert ${permisosActivos > 0 ? 'alert-info' : 'alert-warning'} d-flex align-items-center mb-4">
            <div class="me-3">
                <i class="bi ${permisosActivos > 0 ? 'bi-info-circle-fill' : 'bi-exclamation-triangle-fill'} fs-4"></i>
            </div>
            <div>
                <h6 class="alert-heading mb-1">Resumen de Permisos</h6>
                <p class="mb-0">
                    ${permisosActivos > 0 
                        ? `Este usuario tiene <strong>${permisosActivos} de ${permisosConfig.length}</strong> permisos activos.` 
                        : 'Este usuario <strong>no tiene permisos activos</strong>.'}
                </p>
            </div>
        </div>
        
        <div class="progress mb-4" style="height: 20px;">
            <div class="progress-bar bg-success" role="progressbar" style="width: ${(permisosActivos / permisosConfig.length) * 100}%;" 
                 aria-valuenow="${permisosActivos}" aria-valuemin="0" aria-valuemax="${permisosConfig.length}">
                ${permisosActivos}/${permisosConfig.length}
            </div>
        </div>
        
        <div class="row">
    `;
    
    // Generar tarjetas de permisos
    permisosConfig.forEach(config => {
        const tienePermiso = permisos[config.key];
        permisosHTML += `
            <div class="col-md-6 mb-3">
                <div class="card h-100 ${tienePermiso ? 'border-' + config.color : 'border-light'}">
                    <div class="card-header ${tienePermiso ? 'bg-' + config.color + ' bg-opacity-10' : 'bg-light'}">
                        <div class="d-flex justify-content-between align-items-center">
                            <h6 class="mb-0">
                                <i class="bi ${config.icon} me-2 ${tienePermiso ? 'text-' + config.color : 'text-muted'}"></i>
                                ${config.title}
                            </h6>
                            <span class="badge ${tienePermiso ? 'bg-' + config.color : 'bg-secondary'}">
                                ${tienePermiso ? 'Activo' : 'Inactivo'}
                            </span>
                        </div>
                    </div>
                    <div class="card-body">
                        <p class="card-text ${tienePermiso ? '' : 'text-muted'}">${config.description}</p>
                        <div class="d-flex flex-wrap gap-2">
                            ${getPermissionActions(config.key, tienePermiso)}
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    
    permisosHTML += '</div>';
    permisosBody.innerHTML = permisosHTML;
    
    // Mostrar modal
    const modal = new bootstrap.Modal(permisosModal);
    modal.show();
}

/**
 * Obtiene las acciones específicas para cada tipo de permiso
 * @param {string} permissionKey - Clave del permiso
 * @param {boolean} isActive - Si el permiso está activo
 * @returns {string} HTML con las acciones del permiso
 */
function getPermissionActions(permissionKey, isActive) {
    const opacity = isActive ? '' : 'opacity-50';
    let actions = '';
    
    switch (permissionKey) {
        case 'anuncios':
            actions = `
                <span class="badge bg-light text-dark ${opacity}">Crear anuncios</span>
                <span class="badge bg-light text-dark ${opacity}">Editar anuncios</span>
                <span class="badge bg-light text-dark ${opacity}">Eliminar anuncios</span>
            `;
            break;
        case 'gastos':
            actions = `
                <span class="badge bg-light text-dark ${opacity}">Registrar gastos</span>
                <span class="badge bg-light text-dark ${opacity}">Editar gastos</span>
                <span class="badge bg-light text-dark ${opacity}">Ver reportes</span>
            `;
            break;
        case 'presupuestos':
            actions = `
                <span class="badge bg-light text-dark ${opacity}">Crear presupuestos</span>
                <span class="badge bg-light text-dark ${opacity}">Editar presupuestos</span>
                <span class="badge bg-light text-dark ${opacity}">Ver reportes</span>
            `;
            break;
        case 'cuotas':
            actions = `
                <span class="badge bg-light text-dark ${opacity}">Generar cuotas</span>
                <span class="badge bg-light text-dark ${opacity}">Registrar pagos</span>
                <span class="badge bg-light text-dark ${opacity}">Ver reportes</span>
            `;
            break;
        case 'usuarios':
            actions = `
                <span class="badge bg-light text-dark ${opacity}">Ver usuarios</span>
                <span class="badge bg-light text-dark ${opacity}">Editar inquilinos</span>
            `;
            break;
        case 'cierres':
            actions = `
                <span class="badge bg-light text-dark ${opacity}">Generar cierres</span>
                <span class="badge bg-light text-dark ${opacity}">Ver reportes</span>
                <span class="badge bg-light text-dark ${opacity}">Exportar datos</span>
            `;
            break;
    }
    
    return actions;
}

// Clase para manejar la gestión de usuarios
class UsuariosManager {
    constructor() {
        this.usuarios = [];
        this.usuarioModal = new bootstrap.Modal(document.getElementById('usuarioModal'));
        this.searchTimeout = null; // Para búsqueda con retraso
        this.currentPage = 1;
        this.itemsPerPage = 10;
        this.sortField = 'id';
        this.sortDirection = 'asc';
        this.originalPermisos = null; // Para guardar permisos originales y comparar cambios
    }

    // Inicializar gestor
    init() {
        this.setupEventListeners();
        this.initTooltips();
    }

    // Inicializar tooltips
    initTooltips() {
        const tooltipTriggerList = document.querySelectorAll('[data-bs-toggle="tooltip"]');
        [...tooltipTriggerList].map(tooltipTriggerEl => new bootstrap.Tooltip(tooltipTriggerEl));
    }

    // Configurar listeners de eventos
    setupEventListeners() {
        // Botón guardar usuario
        const btnGuardarUsuario = document.getElementById('btnGuardarUsuario');
        if (btnGuardarUsuario) {
            btnGuardarUsuario.addEventListener('click', () => this.guardarUsuario());
        }
        
        // Cambio en el rol para mostrar/ocultar sección de permisos
        const rolSelect = document.getElementById('usuarioRol');
        if (rolSelect) {
            rolSelect.addEventListener('change', () => {
                this.togglePermisosSection();
                this.updateRolDescription(rolSelect.value);
            });
        }
        
        // Botón nuevo usuario
        const btnNuevoUsuario = document.getElementById('btnNuevoUsuario');
        if (btnNuevoUsuario) {
            btnNuevoUsuario.addEventListener('click', () => this.showUsuarioModal());
        }
        
        // Botón nuevo usuario en configuración
        const btnNuevoUsuarioConfig = document.getElementById('btnNuevoUsuarioConfig');
        if (btnNuevoUsuarioConfig) {
            btnNuevoUsuarioConfig.addEventListener('click', () => this.showUsuarioModal());
        }
        
        // Botón filtrar usuarios
        const btnFiltrarUsuarios = document.getElementById('btnFiltrarUsuarios');
        if (btnFiltrarUsuarios) {
            btnFiltrarUsuarios.addEventListener('click', () => this.filtrarUsuarios());
        }
        
        // Botón filtrar usuarios en configuración
        const btnFiltrarUsuariosConfig = document.getElementById('btnFiltrarUsuariosConfig');
        if (btnFiltrarUsuariosConfig) {
            btnFiltrarUsuariosConfig.addEventListener('click', () => this.filtrarUsuarios());
        }
        
        // Botón limpiar filtros
        const btnLimpiarFiltrosUsuarios = document.getElementById('btnLimpiarFiltrosUsuarios');
        if (btnLimpiarFiltrosUsuarios) {
            btnLimpiarFiltrosUsuarios.addEventListener('click', () => this.limpiarFiltrosUsuarios());
        }
        
        // Botón limpiar filtros en configuración
        const btnLimpiarFiltrosUsuariosConfig = document.getElementById('btnLimpiarFiltrosUsuariosConfig');
        if (btnLimpiarFiltrosUsuariosConfig) {
            btnLimpiarFiltrosUsuariosConfig.addEventListener('click', () => this.limpiarFiltrosUsuarios());
        }
        
        // Botón para limpiar filtros desde estado vacío
        const btnClearFiltersEmpty = document.getElementById('btnClearFiltersEmpty');
        if (btnClearFiltersEmpty) {
            btnClearFiltersEmpty.addEventListener('click', () => this.limpiarFiltrosUsuarios());
        }
        
        // Búsqueda en tiempo real
        const filtroUsuarioBusqueda = document.getElementById('filtroUsuarioBusqueda');
        if (filtroUsuarioBusqueda) {
            filtroUsuarioBusqueda.addEventListener('input', () => {
                // Aplicar filtro después de un breve retraso para evitar muchas actualizaciones
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(() => {
                    if (filtroUsuarioBusqueda.value.length >= 3 || filtroUsuarioBusqueda.value.length === 0) {
                        this.filtrarUsuarios();
                    }
                }, 300);
            });
        }
        
        // Búsqueda en tiempo real en configuración
        const filtroUsuarioBusquedaConfig = document.getElementById('filtroUsuarioBusquedaConfig');
        if (filtroUsuarioBusquedaConfig) {
            filtroUsuarioBusquedaConfig.addEventListener('input', () => {
                // Aplicar filtro después de un breve retraso para evitar muchas actualizaciones
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(() => {
                    if (filtroUsuarioBusquedaConfig.value.length >= 3 || filtroUsuarioBusquedaConfig.value.length === 0) {
                        this.filtrarUsuarios();
                    }
                }, 300);
            });
        }
        
        // Botón de búsqueda rápida
        const btnBusquedaRapidaConfig = document.getElementById('btnBusquedaRapidaConfig');
        if (btnBusquedaRapidaConfig) {
            btnBusquedaRapidaConfig.addEventListener('click', () => this.filtrarUsuarios());
        }
        
        // Botón para refrescar usuarios
        const btnRefreshUsuariosConfig = document.getElementById('btnRefreshUsuariosConfig');
        if (btnRefreshUsuariosConfig) {
            btnRefreshUsuariosConfig.addEventListener('click', () => this.loadUsuarios());
        }
        
        // Botón para mostrar/ocultar inactivos
        const btnToggleInactivosConfig = document.getElementById('btnToggleInactivosConfig');
        if (btnToggleInactivosConfig) {
            btnToggleInactivosConfig.addEventListener('click', () => this.toggleInactivos());
        }
        
        // Botón para exportar a PDF
        const btnExportarPDFUsuariosConfig = document.getElementById('btnExportarPDFUsuariosConfig');
        if (btnExportarPDFUsuariosConfig) {
            btnExportarPDFUsuariosConfig.addEventListener('click', () => this.exportarPDF());
        }
        
        // Botón para exportar usuarios
        const btnExportarUsuarios = document.getElementById('btnExportarUsuarios');
        if (btnExportarUsuarios) {
            btnExportarUsuarios.addEventListener('click', () => this.exportarExcel());
        }
        
        // Botones para seleccionar/deseleccionar todos los permisos
        const btnSeleccionarTodos = document.getElementById('btnSeleccionarTodos');
        if (btnSeleccionarTodos) {
            btnSeleccionarTodos.addEventListener('click', () => this.seleccionarTodosPermisos(true));
        }
        
        const btnDeseleccionarTodos = document.getElementById('btnDeseleccionarTodos');
        if (btnDeseleccionarTodos) {
            btnDeseleccionarTodos.addEventListener('click', () => this.seleccionarTodosPermisos(false));
        }
        
        // Botón para mostrar/ocultar contraseña
        const togglePassword = document.getElementById('togglePassword');
        if (togglePassword) {
            togglePassword.addEventListener('click', () => {
                const passwordInput = document.getElementById('usuarioPassword');
                const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
                passwordInput.setAttribute('type', type);
                togglePassword.innerHTML = type === 'password' ? '<i class="bi bi-eye"></i>' : '<i class="bi bi-eye-slash"></i>';
            });
        }
        
        // Configurar ordenamiento de columnas
        const sortableColumns = document.querySelectorAll('.sortable-column');
        if (sortableColumns) {
            sortableColumns.forEach(column => {
                column.addEventListener('click', () => {
                    const field = column.getAttribute('data-sort');
                    this.sortTable(field);
                });
            });
        }
        
        // Cargar departamentos en el filtro
        this.cargarDepartamentosEnFiltro();
    }
    
    // Seleccionar o deseleccionar todos los permisos
    seleccionarTodosPermisos(seleccionar) {
        const permisos = [
            'permisoAnuncios',
            'permisoGastos',
            'permisoPresupuestos',
            'permisoCuotas',
            'permisoUsuarios',
            'permisoCierres'
        ];
        
        permisos.forEach(id => {
            const checkbox = document.getElementById(id);
            if (checkbox) {
                checkbox.checked = seleccionar;
            }
        });
    }
    
    // Actualizar descripción del rol seleccionado
    updateRolDescription(rol) {
        const rolDescription = document.getElementById('rolDescription');
        if (!rolDescription) return;
        
        switch (rol) {
            case 'ADMIN':
                rolDescription.textContent = 'Los administradores tienen acceso completo a todas las funciones del sistema.';
                break;
            case 'COMITE':
                rolDescription.textContent = 'Los usuarios del comité tienen acceso a funciones específicas según los permisos asignados.';
                break;
            case 'INQUILINO':
                rolDescription.textContent = 'Los inquilinos tienen acceso limitado al portal de inquilinos.';
                break;
            default:
                rolDescription.textContent = '';
        }
    }
    
    // Exportar usuarios a Excel
    exportarExcel() {
        // Implementación básica (en un sistema real se usaría una librería como SheetJS)
        alert('Funcionalidad de exportación a Excel en desarrollo');
    }
    
    // Exportar usuarios a PDF
    exportarPDF() {
        // Implementación básica (en un sistema real se usaría una librería como jsPDF)
        alert('Funcionalidad de exportación a PDF en desarrollo');
    }
    
    // Mostrar/ocultar usuarios inactivos
    toggleInactivos() {
        const filtroEstado = document.getElementById('filtroUsuarioEstadoConfig');
        if (filtroEstado) {
            // Si ya está filtrando por inactivos, mostrar todos
            if (filtroEstado.value === 'false') {
                filtroEstado.value = '';
            } else {
                // Si no, mostrar solo inactivos
                filtroEstado.value = 'false';
            }
            this.filtrarUsuarios();
        }
    }
    
    // Ordenar tabla por campo
    sortTable(field) {
        // Si es el mismo campo, invertir dirección
        if (field === this.sortField) {
            this.sortDirection = this.sortDirection === 'asc' ? 'desc' : 'asc';
        } else {
            // Si es un campo diferente, ordenar ascendente
            this.sortField = field;
            this.sortDirection = 'asc';
        }
        
        // Actualizar clases de columnas
        const columns = document.querySelectorAll('.sortable-column');
        columns.forEach(col => {
            col.classList.remove('sort-asc', 'sort-desc');
            if (col.getAttribute('data-sort') === this.sortField) {
                col.classList.add(this.sortDirection === 'asc' ? 'sort-asc' : 'sort-desc');
            }
        });
        
        // Aplicar ordenamiento
        this.filtrarUsuarios();
    }
    
    // Cargar departamentos en el filtro
    cargarDepartamentosEnFiltro() {
        const departamentosSelects = [
            document.getElementById('filtroUsuarioDepartamento'),
            document.getElementById('filtroUsuarioDepartamentoConfig')
        ];
        
        departamentosSelects.forEach(departamentosSelect => {
            if (!departamentosSelect) return;
            
            // Lista de departamentos disponibles
            const departamentos = [
                '101', '102', '103', '104',
                '201', '202', '203', '204',
                '301', '302', '303', '304',
                '401', '402', '403', '404',
                '501', '502', '503', '504'
            ];
            
            // Limpiar opciones existentes (excepto la primera)
            while (departamentosSelect.options.length > 1) {
                departamentosSelect.remove(1);
            }
            
            // Crear grupos de opciones por piso
            const pisos = {
                'Primer Piso': ['101', '102', '103', '104'],
                'Segundo Piso': ['201', '202', '203', '204'],
                'Tercer Piso': ['301', '302', '303', '304'],
                'Cuarto Piso': ['401', '402', '403', '404'],
                'Quinto Piso': ['501', '502', '503', '504']
            };
            
            // Añadir opciones agrupadas por piso
            Object.entries(pisos).forEach(([piso, deptos]) => {
                const optgroup = document.createElement('optgroup');
                optgroup.label = piso;
                
                deptos.forEach(depto => {
                    const option = document.createElement('option');
                    option.value = depto;
                    option.textContent = depto;
                    optgroup.appendChild(option);
                });
                
                departamentosSelect.appendChild(optgroup);
            });
        });
    }
    
    // Filtrar usuarios según criterios seleccionados
    filtrarUsuarios() {
        // Obtener valores de filtros (intentar de ambos conjuntos de filtros)
        const rol = document.getElementById('filtroUsuarioRolConfig')?.value || 
                   document.getElementById('filtroUsuarioRol')?.value || '';
                   
        const estado = document.getElementById('filtroUsuarioEstadoConfig')?.value || 
                      document.getElementById('filtroUsuarioEstado')?.value || '';
                      
        const departamento = document.getElementById('filtroUsuarioDepartamentoConfig')?.value || 
                            document.getElementById('filtroUsuarioDepartamento')?.value || '';
                            
        const busqueda = (document.getElementById('filtroUsuarioBusquedaConfig')?.value || 
                         document.getElementById('filtroUsuarioBusqueda')?.value || '').toLowerCase();
        
        // Mostrar loading
        this.showLoading(true);
        
        // Aplicar filtros a la lista completa de usuarios
        let usuariosFiltrados = this.usuarios.filter(usuario => {
            // Filtro por rol
            if (rol && usuario.rol !== rol) {
                return false;
            }
            
            // Filtro por estado
            if (estado !== '') {
                const estadoBoolean = estado === 'true';
                if (usuario.activo !== estadoBoolean) {
                    return false;
                }
            }
            
            // Filtro por departamento
            if (departamento && usuario.departamento !== departamento) {
                return false;
            }
            
            // Filtro por búsqueda (nombre, email o departamento)
            if (busqueda) {
                const nombreMatch = usuario.nombre.toLowerCase().includes(busqueda);
                const emailMatch = usuario.email.toLowerCase().includes(busqueda);
                const deptoMatch = usuario.departamento?.toLowerCase().includes(busqueda) || false;
                if (!nombreMatch && !emailMatch && !deptoMatch) {
                    return false;
                }
            }
            
            return true;
        });
        
        // Aplicar ordenamiento
        usuariosFiltrados = this.sortUsuarios(usuariosFiltrados, this.sortField, this.sortDirection);
        
        // Actualizar contador de usuarios
        const totalUsuariosBadge = document.getElementById('totalUsuariosBadge');
        if (totalUsuariosBadge) {
            totalUsuariosBadge.textContent = usuariosFiltrados.length;
        }
        
        // Renderizar tabla con usuarios filtrados y paginados
        this.renderUsuariosTablePaginated(usuariosFiltrados);
        
        // Ocultar loading
        this.showLoading(false);
    }
    
    // Ordenar usuarios
    sortUsuarios(usuarios, field, direction) {
        return [...usuarios].sort((a, b) => {
            let valueA, valueB;
            
            // Obtener valores a comparar según el campo
            switch (field) {
                case 'id':
                    valueA = a.id;
                    valueB = b.id;
                    break;
                case 'nombre':
                    valueA = a.nombre.toLowerCase();
                    valueB = b.nombre.toLowerCase();
                    break;
                case 'email':
                    valueA = a.email.toLowerCase();
                    valueB = b.email.toLowerCase();
                    break;
                case 'departamento':
                    valueA = a.departamento || '';
                    valueB = b.departamento || '';
                    break;
                default:
                    valueA = a[field];
                    valueB = b[field];
            }
            
            // Comparar valores
            if (valueA < valueB) {
                return direction === 'asc' ? -1 : 1;
            }
            if (valueA > valueB) {
                return direction === 'asc' ? 1 : -1;
            }
            return 0;
        });
    }
    
    // Renderizar tabla con usuarios paginados
    renderUsuariosTablePaginated(usuarios) {
        // Calcular paginación
        const totalPages = Math.ceil(usuarios.length / this.itemsPerPage);
        
        // Ajustar página actual si es necesario
        if (this.currentPage > totalPages) {
            this.currentPage = totalPages > 0 ? totalPages : 1;
        }
        
        // Calcular índices de inicio y fin
        const startIndex = (this.currentPage - 1) * this.itemsPerPage;
        const endIndex = Math.min(startIndex + this.itemsPerPage, usuarios.length);
        
        // Obtener usuarios de la página actual
        const usuariosPaginados = usuarios.slice(startIndex, endIndex);
        
        // Renderizar tabla
        this.renderUsuariosTableFiltered(usuariosPaginados, usuarios.length === 0);
        
        // Actualizar información de paginación
        this.updatePaginationInfo(startIndex, endIndex, usuarios.length);
        
        // Renderizar controles de paginación
        this.renderPaginationControls(totalPages);
    }
    
    // Actualizar información de paginación
    updatePaginationInfo(startIndex, endIndex, totalItems) {
        const paginationInfo = document.getElementById('paginationInfoConfig');
        if (paginationInfo) {
            if (totalItems === 0) {
                paginationInfo.textContent = '0-0 de 0';
            } else {
                paginationInfo.textContent = `${startIndex + 1}-${endIndex} de ${totalItems}`;
            }
        }
    }
    
    // Renderizar controles de paginación
    renderPaginationControls(totalPages) {
        const paginationContainer = document.getElementById('paginationUsuariosConfig');
        if (!paginationContainer) return;
        
        paginationContainer.innerHTML = '';
        
        // Si no hay páginas, ocultar paginación
        if (totalPages === 0) {
            document.getElementById('paginationContainerConfig').style.display = 'none';
            return;
        }
        
        // Mostrar paginación
        document.getElementById('paginationContainerConfig').style.display = 'flex';
        
        // Botón anterior
        const prevLi = document.createElement('li');
        prevLi.className = `page-item ${this.currentPage === 1 ? 'disabled' : ''}`;
        
        const prevLink = document.createElement('a');
        prevLink.className = 'page-link';
        prevLink.href = '#';
        prevLink.setAttribute('aria-label', 'Anterior');
        prevLink.innerHTML = '<span aria-hidden="true">&laquo;</span>';
        
        prevLink.addEventListener('click', (e) => {
            e.preventDefault();
            if (this.currentPage > 1) {
                this.currentPage--;
                this.filtrarUsuarios();
            }
        });
        
        prevLi.appendChild(prevLink);
        paginationContainer.appendChild(prevLi);
        
        // Determinar rango de páginas a mostrar
        let startPage = Math.max(1, this.currentPage - 2);
        let endPage = Math.min(totalPages, startPage + 4);
        
        // Ajustar si estamos cerca del final
        if (endPage - startPage < 4 && startPage > 1) {
            startPage = Math.max(1, endPage - 4);
        }
        
        // Botones de página
        for (let i = startPage; i <= endPage; i++) {
            const pageLi = document.createElement('li');
            pageLi.className = `page-item ${i === this.currentPage ? 'active' : ''}`;
            
            const pageLink = document.createElement('a');
            pageLink.className = 'page-link';
            pageLink.href = '#';
            pageLink.textContent = i;
            
            pageLink.addEventListener('click', (e) => {
                e.preventDefault();
                this.currentPage = i;
                this.filtrarUsuarios();
            });
            
            pageLi.appendChild(pageLink);
            paginationContainer.appendChild(pageLi);
        }
        
        // Botón siguiente
        const nextLi = document.createElement('li');
        nextLi.className = `page-item ${this.currentPage === totalPages ? 'disabled' : ''}`;
        
        const nextLink = document.createElement('a');
        nextLink.className = 'page-link';
        nextLink.href = '#';
        nextLink.setAttribute('aria-label', 'Siguiente');
        nextLink.innerHTML = '<span aria-hidden="true">&raquo;</span>';
        
        nextLink.addEventListener('click', (e) => {
            e.preventDefault();
            if (this.currentPage < totalPages) {
                this.currentPage++;
                this.filtrarUsuarios();
            }
        });
        
        nextLi.appendChild(nextLink);
        paginationContainer.appendChild(nextLi);
    }
    
    // Renderizar tabla con usuarios filtrados
    renderUsuariosTableFiltered(usuariosFiltrados, isEmpty) {
        const tableBody = document.getElementById('usuariosTableBodyConfig') || 
                         document.getElementById('usuariosTableBody');
        if (!tableBody) return;
        
        tableBody.innerHTML = '';
        
        // Mostrar mensaje si no hay resultados
        const emptyUsuariosConfig = document.getElementById('emptyUsuariosConfig');
        if (emptyUsuariosConfig) {
            emptyUsuariosConfig.style.display = isEmpty ? 'block' : 'none';
        }
        
        // Si no hay usuarios, salir
        if (isEmpty) return;
        
        // Renderizar usuarios
        usuariosFiltrados.forEach(usuario => {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td>${usuario.id}</td>
                <td>
                    <div class="d-flex align-items-center">
                        <div class="avatar-circle me-2 bg-${this.getRolColor(usuario.rol)} text-white" style="width: 32px; height: 32px; font-size: 0.8rem;">
                            <span>${this.getInitials(usuario.nombre)}</span>
                        </div>
                        <div>
                            <div class="fw-bold">${usuario.nombre}</div>
                            <div class="small text-muted">${usuario.departamento ? 'Depto. ' + usuario.departamento : 'Sin departamento'}</div>
                        </div>
                    </div>
                </td>
                <td>${usuario.email}</td>
                <td>${usuario.departamento || '<span class="text-muted">N/A</span>'}</td>
                <td>
                    <span class="badge ${
                        usuario.rol === 'ADMIN' ? 'bg-primary' : 
                        usuario.rol === 'COMITE' ? 'bg-info' : 
                        'bg-secondary'
                    }">${usuario.rol}</span>
                    ${usuario.rol === 'COMITE' ? this.renderPermisosIcons(usuario.permisos) : ''}
                </td>
                <td>
                    <span class="badge badge-status ${usuario.activo ? 'active' : 'inactive'}">
                        <i class="bi ${usuario.activo ? 'bi-check-circle' : 'bi-x-circle'} me-1"></i>
                        ${usuario.activo ? 'Activo' : 'Inactivo'}
                    </span>
                </td>
                <td class="action-buttons">
                    <button class="btn btn-sm btn-outline-primary me-1" data-action="edit" data-id="${usuario.id}" data-bs-toggle="tooltip" title="Editar usuario">
                        <i class="bi bi-pencil"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-danger" data-action="delete" data-id="${usuario.id}" data-bs-toggle="tooltip" title="Eliminar usuario">
                        <i class="bi bi-trash"></i>
                    </button>
                    <button class="btn btn-sm btn-outline-secondary" data-action="toggle" data-id="${usuario.id}" data-bs-toggle="tooltip" title="${usuario.activo ? 'Desactivar' : 'Activar'} usuario">
                        <i class="bi ${usuario.activo ? 'bi-toggle-on' : 'bi-toggle-off'}"></i>
                    </button>
                </td>
            `;
            
            tableBody.appendChild(tr);
        });
        
        // Configurar botones de acción
        tableBody.querySelectorAll('[data-action]').forEach(button => {
            button.addEventListener('click', (e) => {
                const action = button.getAttribute('data-action');
                const id = parseInt(button.getAttribute('data-id'));
                
                if (action === 'edit') {
                    this.editarUsuario(id);
                } else if (action === 'delete') {
                    this.eliminarUsuario(id);
                } else if (action === 'toggle') {
                    this.toggleUsuarioEstado(id);
                }
            });
        });
        
        // Inicializar tooltips
        this.initTooltips();
    }
    
    // Obtener iniciales del nombre
    getInitials(name) {
        if (!name) return '--';
        return name.split(' ')
            .map(part => part.charAt(0))
            .join('')
            .substring(0, 2)
            .toUpperCase();
    }
    
    // Obtener color según rol
    getRolColor(rol) {
        switch (rol) {
            case 'ADMIN': return 'primary';
            case 'COMITE': return 'info';
            default: return 'secondary';
        }
    }
    
    // Cambiar estado de usuario (activar/desactivar)
    async toggleUsuarioEstado(id) {
        const usuario = this.usuarios.find(u => u.id === id);
        if (!usuario) return;
        
        try {
            // Mostrar loading
            this.showLoading(true);
            
            // Cambiar estado
            const nuevoEstado = !usuario.activo;
            
            // Enviar actualización al servidor
            const response = await fetchAuth(`${API_URL}/auth/usuarios/${id}/estado`, {
                method: 'PUT',
                body: JSON.stringify({ activo: nuevoEstado })
            });
            
            // Mostrar mensaje de éxito
            showAlert('configAlertContainer', 
                `Usuario ${nuevoEstado ? 'activado' : 'desactivado'} exitosamente`, 
                nuevoEstado ? 'success' : 'warning');
            
            // Recargar usuarios
            this.loadUsuarios();
        } catch (error) {
            console.error('Error al cambiar estado de usuario:', error);
            showAlert('configAlertContainer', error.message || 'Error al cambiar estado de usuario', 'danger');
        } finally {
            this.showLoading(false);
        }
    }
    
    // Limpiar filtros de usuarios
    limpiarFiltrosUsuarios() {
        // Restablecer valores de los filtros
        const filtros = [
            'filtroUsuarioRol',
            'filtroUsuarioEstado',
            'filtroUsuarioDepartamento',
            'filtroUsuarioBusqueda',
            'filtroUsuarioRolConfig',
            'filtroUsuarioEstadoConfig',
            'filtroUsuarioDepartamentoConfig',
            'filtroUsuarioBusquedaConfig'
        ];
        
        filtros.forEach(id => {
            const elemento = document.getElementById(id);
            if (elemento) {
                if (elemento.tagName === 'SELECT') {
                    elemento.selectedIndex = 0;
                } else if (elemento.tagName === 'INPUT') {
                    elemento.value = '';
                }
            }
        });
        
        // Restablecer ordenamiento
        this.sortField = 'id';
        this.sortDirection = 'asc';
        
        // Restablecer paginación
        this.currentPage = 1;
        
        // Actualizar clases de columnas
        const columns = document.querySelectorAll('.sortable-column');
        columns.forEach(col => {
            col.classList.remove('sort-asc', 'sort-desc');
            if (col.getAttribute('data-sort') === 'id') {
                col.classList.add('sort-asc');
            }
        });
        
        // Volver a mostrar todos los usuarios
        this.loadUsuarios();
    }
    
    // Mostrar u ocultar sección de permisos según el rol seleccionado
    togglePermisosSection() {
        const rolSelect = document.getElementById('usuarioRol');
        const permisosSection = document.getElementById('permisosSection');
        const passwordRequired = document.getElementById('passwordRequired');
        
        if (rolSelect && permisosSection) {
            if (rolSelect.value === 'COMITE') {
                permisosSection.style.display = 'block';
                
                // Verificar si hay al menos un permiso seleccionado
                const tienePermisos = this.verificarPermisosSeleccionados();
                if (!tienePermisos) {
                    // Seleccionar al menos un permiso por defecto
                    document.getElementById('permisoAnuncios').checked = true;
                }
            } else {
                permisosSection.style.display = 'none';
            }
        }
        
        // Actualizar indicador de contraseña requerida
        const usuarioId = document.getElementById('usuarioId').value;
        if (passwordRequired && usuarioId) {
            passwordRequired.style.display = 'none'; // No requerida en edición
        } else if (passwordRequired) {
            passwordRequired.style.display = 'inline'; // Requerida en creación
        }
    }
    
    // Verificar si hay al menos un permiso seleccionado
    verificarPermisosSeleccionados() {
        return document.getElementById('permisoAnuncios').checked ||
               document.getElementById('permisoGastos').checked ||
               document.getElementById('permisoPresupuestos').checked ||
               document.getElementById('permisoCuotas').checked ||
               document.getElementById('permisoUsuarios').checked ||
               document.getElementById('permisoCierres').checked;
    }

    // Cargar usuarios
    async loadUsuarios() {
        try {
            // Mostrar loading
            this.showLoading(true);
            
            const response = await fetchAuth(`${API_URL}/auth/usuarios`);
            this.usuarios = response.usuarios || [];
            
            // Verificar si hay filtros activos
            const hayFiltrosActivos = this.verificarFiltrosActivos();
            
            if (hayFiltrosActivos) {
                // Si hay filtros activos, aplicarlos
                this.filtrarUsuarios();
            } else {
                // Si no hay filtros, mostrar todos los usuarios
                this.renderUsuariosTablePaginated(this.usuarios);
            }
            
            // Actualizar contador total
            const totalUsuariosBadge = document.getElementById('totalUsuariosBadge');
            if (totalUsuariosBadge) {
                totalUsuariosBadge.textContent = this.usuarios.length;
            }
        } catch (error) {
            console.error('Error al cargar usuarios:', error);
            showAlert('configAlertContainer', 'Error al cargar usuarios: ' + (error.message || 'Error desconocido'), 'danger');
        } finally {
            // Ocultar loading
            this.showLoading(false);
        }
    }
    
    // Verificar si hay filtros activos
    verificarFiltrosActivos() {
        // Verificar ambos conjuntos de filtros
        const rol = document.getElementById('filtroUsuarioRolConfig')?.value || 
                   document.getElementById('filtroUsuarioRol')?.value || '';
                   
        const estado = document.getElementById('filtroUsuarioEstadoConfig')?.value || 
                      document.getElementById('filtroUsuarioEstado')?.value || '';
                      
        const departamento = document.getElementById('filtroUsuarioDepartamentoConfig')?.value || 
                            document.getElementById('filtroUsuarioDepartamento')?.value || '';
                            
        const busqueda = document.getElementById('filtroUsuarioBusquedaConfig')?.value || 
                        document.getElementById('filtroUsuarioBusqueda')?.value || '';
        
        return rol !== '' || estado !== '' || departamento !== '' || busqueda !== '';
    }

    // Mostrar modal de usuario
    showUsuarioModal(usuario = null) {
        // Limpiar formulario
        document.getElementById('usuarioForm').reset();
        document.getElementById('usuarioId').value = '';
        document.getElementById('passwordHelp').style.display = 'none';
        document.getElementById('permisosSection').style.display = 'none';
        document.getElementById('usuarioFormAlert').classList.add('d-none');
        
        // Activar usuario por defecto
        document.getElementById('usuarioActivo').checked = true;
        
        // Limpiar mensajes de validación
        this.clearValidationMessages();
        
        // Desmarcar todos los checkboxes de permisos
        document.querySelectorAll('#permisosSection input[type="checkbox"]').forEach(checkbox => {
            checkbox.checked = false;
        });
        
        // Configurar modal según sea nuevo o edición
        if (usuario) {
            document.getElementById('usuarioModalLabel').textContent = 'Editar Usuario';
            document.getElementById('usuarioId').value = usuario.id;
            document.getElementById('usuarioNombre').value = usuario.nombre;
            document.getElementById('usuarioEmail').value = usuario.email;
            document.getElementById('usuarioDepartamento').value = usuario.departamento || '';
            document.getElementById('usuarioRol').value = usuario.rol;
            document.getElementById('usuarioActivo').checked = usuario.activo !== false;
            document.getElementById('passwordHelp').style.display = 'block';
            document.getElementById('passwordRequired').style.display = 'none'; // No requerida en edición
            
            // Si es usuario de comité, mostrar y configurar permisos
            if (usuario.rol === 'COMITE' && usuario.permisos) {
                document.getElementById('permisosSection').style.display = 'block';
                
                // Guardar permisos originales para comparar cambios
                this.originalPermisos = { ...usuario.permisos };
                
                // Marcar checkboxes según permisos
                if (usuario.permisos.anuncios) document.getElementById('permisoAnuncios').checked = true;
                if (usuario.permisos.gastos) document.getElementById('permisoGastos').checked = true;
                if (usuario.permisos.presupuestos) document.getElementById('permisoPresupuestos').checked = true;
                if (usuario.permisos.cuotas) document.getElementById('permisoCuotas').checked = true;
                if (usuario.permisos.usuarios) document.getElementById('permisoUsuarios').checked = true;
                if (usuario.permisos.cierres) document.getElementById('permisoCierres').checked = true;
            } else {
                this.originalPermisos = null;
            }
        } else {
            document.getElementById('usuarioModalLabel').textContent = 'Nuevo Usuario';
            document.getElementById('passwordRequired').style.display = 'inline'; // Requerida en creación
            this.originalPermisos = null;
        }
        
        // Actualizar descripción del rol
        this.updateRolDescription(document.getElementById('usuarioRol').value);
        
        // Configurar validación en tiempo real
        this.setupRealtimeValidation();
        
        // Mostrar modal
        this.usuarioModal.show();
    }
    
    // Configurar validación en tiempo real
    setupRealtimeValidation() {
        const form = document.getElementById('usuarioForm');
        const inputs = form.querySelectorAll('input, select');
        
        // Validar al enviar formulario
        form.addEventListener('submit', (e) => {
            e.preventDefault();
            this.guardarUsuario();
        });
        
        // Validar cada campo al cambiar
        inputs.forEach(input => {
            input.addEventListener('input', () => {
                this.validateField(input);
            });
            
            input.addEventListener('blur', () => {
                this.validateField(input);
            });
            
            input.addEventListener('change', () => {
                this.validateField(input);
            });
        });
        
        // Validar permisos al cambiar
        document.querySelectorAll('#permisosSection input[type="checkbox"]').forEach(checkbox => {
            checkbox.addEventListener('change', () => {
                const tienePermisos = this.verificarPermisosSeleccionados();
                const permisosInvalidFeedback = document.getElementById('permisosInvalidFeedback');
                
                if (!tienePermisos && permisosInvalidFeedback) {
                    permisosInvalidFeedback.style.display = 'block';
                } else if (permisosInvalidFeedback) {
                    permisosInvalidFeedback.style.display = 'none';
                }
            });
        });
    }
    
    // Validar un campo específico
    validateField(input) {
        const id = input.id;
        
        switch (id) {
            case 'usuarioNombre':
                this.validateNombre(input.value);
                break;
            case 'usuarioEmail':
                this.validateEmail(input.value);
                break;
            case 'usuarioPassword':
                this.validatePassword(input.value);
                break;
            case 'usuarioDepartamento':
                this.validateDepartamento(input.value);
                break;
        }
    }
    
    // Validar nombre
    validateNombre(nombre) {
        const input = document.getElementById('usuarioNombre');
        
        if (!nombre || nombre.trim().length < 3) {
            this.showValidationError(input, 'El nombre debe tener al menos 3 caracteres');
            return false;
        }
        
        this.showValidationSuccess(input);
        return true;
    }
    
    // Validar email
    validateEmail(email) {
        const input = document.getElementById('usuarioEmail');
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        
        if (!email) {
            this.showValidationError(input, 'El email es obligatorio');
            return false;
        }
        
        if (!emailRegex.test(email)) {
            this.showValidationError(input, 'El email no es válido');
            return false;
        }
        
        this.showValidationSuccess(input);
        return true;
    }
    
    // Validar password
    validatePassword(password) {
        const input = document.getElementById('usuarioPassword');
        const usuarioId = document.getElementById('usuarioId').value;
        
        // Si es edición y no se proporciona password, es válido
        if (usuarioId && !password) {
            this.clearValidationMessage(input);
            return true;
        }
        
        if (!password || password.length < 6) {
            this.showValidationError(input, 'La contraseña debe tener al menos 6 caracteres');
            return false;
        }
        
        this.showValidationSuccess(input);
        return true;
    }
    
    // Validar departamento
    validateDepartamento(departamento) {
        const select = document.getElementById('usuarioDepartamento');
        
        if (!departamento) {
            this.showValidationError(select, 'Debe seleccionar un departamento');
            return false;
        }
        
        this.showValidationSuccess(select);
        return true;
    }
    
    // Mostrar error de validación
    showValidationError(element, message) {
        element.classList.remove('is-valid');
        element.classList.add('is-invalid');
        
        // Buscar o crear elemento de feedback
        let feedback = element.nextElementSibling;
        if (!feedback || !feedback.classList.contains('invalid-feedback')) {
            feedback = document.createElement('div');
            feedback.className = 'invalid-feedback';
            element.parentNode.insertBefore(feedback, element.nextSibling);
        }
        
        feedback.textContent = message;
    }
    
    // Mostrar éxito de validación
    showValidationSuccess(element) {
        element.classList.remove('is-invalid');
        element.classList.add('is-valid');
        
        // Remover mensaje de error si existe
        const feedback = element.nextElementSibling;
        if (feedback && feedback.classList.contains('invalid-feedback')) {
            feedback.remove();
        }
    }
    
    // Limpiar mensaje de validación
    clearValidationMessage(element) {
        element.classList.remove('is-valid', 'is-invalid');
        
        const feedback = element.nextElementSibling;
        if (feedback && feedback.classList.contains('invalid-feedback')) {
            feedback.remove();
        }
    }
    
    // Limpiar todos los mensajes de validación
    clearValidationMessages() {
        const form = document.getElementById('usuarioForm');
        if (form) {
            form.querySelectorAll('.is-valid, .is-invalid').forEach(el => {
                el.classList.remove('is-valid', 'is-invalid');
            });
            
            form.querySelectorAll('.invalid-feedback').forEach(el => {
                el.remove();
            });
        }
    }

    // Guardar usuario (crear o actualizar)
    async guardarUsuario() {
        try {
            const usuarioId = document.getElementById('usuarioId').value;
            const nombre = document.getElementById('usuarioNombre').value.trim();
            const email = document.getElementById('usuarioEmail').value.trim();
            const password = document.getElementById('usuarioPassword').value;
            const departamento = document.getElementById('usuarioDepartamento').value;
            const rol = document.getElementById('usuarioRol').value;
            const activo = document.getElementById('usuarioActivo').checked;
            
            // Validar todos los campos
            let isValid = true;
            
            if (!this.validateNombre(nombre)) isValid = false;
            if (!this.validateEmail(email)) isValid = false;
            if (!this.validateDepartamento(departamento)) isValid = false;
            
            // Validar password solo si es nuevo usuario o si se proporciona
            if (!usuarioId || password) {
                if (!this.validatePassword(password)) isValid = false;
            }
            
            if (!isValid) {
                // Mostrar alerta en el formulario
                const alertElement = document.getElementById('usuarioFormAlert');
                const alertMessage = document.getElementById('usuarioFormAlertMessage');
                
                alertElement.classList.remove('d-none');
                alertMessage.textContent = 'Por favor corrija los errores en el formulario';
                
                // Hacer scroll al inicio del formulario
                alertElement.scrollIntoView({ behavior: 'smooth' });
                
                return;
            }
            
            // Validar que al menos un permiso esté seleccionado si es COMITE
            if (rol === 'COMITE') {
                const tienePermisos = this.verificarPermisosSeleccionados();
                
                if (!tienePermisos) {
                    // Mostrar alerta en el formulario
                    const alertElement = document.getElementById('usuarioFormAlert');
                    const alertMessage = document.getElementById('usuarioFormAlertMessage');
                    
                    alertElement.classList.remove('d-none');
                    alertMessage.textContent = 'Debe seleccionar al menos un permiso para usuarios del comité';
                    
                    // Hacer scroll al inicio del formulario
                    alertElement.scrollIntoView({ behavior: 'smooth' });
                    
                    return;
                }
            }
            
            // Mostrar loading en el botón
            const btnGuardar = document.getElementById('btnGuardarUsuario');
            const originalText = btnGuardar.innerHTML;
            btnGuardar.disabled = true;
            btnGuardar.innerHTML = '<span class="spinner-border spinner-border-sm me-2"></span>Guardando...';
            
            const userData = {
                nombre,
                email,
                departamento,
                rol,
                activo
            };
            
            // Agregar password solo si se proporciona (o es nuevo usuario)
            if (password) {
                userData.password = password;
            }
            
            // Si el rol es COMITE, agregar permisos
            if (rol === 'COMITE') {
                userData.permisos = {
                    anuncios: document.getElementById('permisoAnuncios').checked,
                    gastos: document.getElementById('permisoGastos').checked,
                    presupuestos: document.getElementById('permisoPresupuestos').checked,
                    cuotas: document.getElementById('permisoCuotas').checked,
                    usuarios: document.getElementById('permisoUsuarios').checked,
                    cierres: document.getElementById('permisoCierres').checked
                };
            }
            
            let response;
            
            if (usuarioId) {
                // Actualizar usuario existente
                response = await fetchAuth(`${API_URL}/auth/usuarios/${usuarioId}`, {
                    method: 'PUT',
                    body: JSON.stringify(userData)
                });
                
                showAlert('configAlertContainer', 'Usuario actualizado exitosamente', 'success');
            } else {
                // Crear nuevo usuario
                response = await fetchAuth(`${API_URL}/auth/registro`, {
                    method: 'POST',
                    body: JSON.stringify(userData)
                });
                
                showAlert('configAlertContainer', 'Usuario creado exitosamente', 'success');
            }
            
            // Cerrar modal y recargar usuarios
            this.usuarioModal.hide();
            this.loadUsuarios();
            
            // Restaurar botón
            btnGuardar.disabled = false;
            btnGuardar.innerHTML = originalText;
        } catch (error) {
            console.error('Error al guardar usuario:', error);
            
            // Mostrar alerta en el formulario
            const alertElement = document.getElementById('usuarioFormAlert');
            const alertMessage = document.getElementById('usuarioFormAlertMessage');
            
            alertElement.classList.remove('d-none');
            alertMessage.textContent = error.message || 'Error al guardar usuario';
            
            // Hacer scroll al inicio del formulario
            alertElement.scrollIntoView({ behavior: 'smooth' });
            
            // Restaurar botón en caso de error
            const btnGuardar = document.getElementById('btnGuardarUsuario');
            btnGuardar.disabled = false;
            btnGuardar.innerHTML = '<i class="bi bi-save me-1"></i> Guardar';
        }
    }

    // Editar usuario
    editarUsuario(id) {
        const usuario = this.usuarios.find(u => u.id === id);
        if (usuario) {
            this.showUsuarioModal(usuario);
        }
    }

    // Eliminar usuario con confirmación mejorada
    async eliminarUsuario(id) {
        const usuario = this.usuarios.find(u => u.id === id);
        if (!usuario) return;
        
        // Crear modal de confirmación personalizado
        const confirmModal = this.createConfirmModal(
            'Confirmar Eliminación',
            `¿Está seguro de eliminar al usuario <strong>${usuario.nombre}</strong>?`,
            `<div class="alert alert-warning">
                <i class="bi bi-exclamation-triangle me-2"></i>
                Esta acción no se puede deshacer. Se eliminarán todos los datos asociados al usuario.
            </div>
            <div class="card border-0 bg-light mb-3">
                <div class="card-body">
                    <div class="d-flex align-items-center mb-3">
                        <div class="avatar-circle me-3 bg-${this.getRolColor(usuario.rol)} text-white">
                            <span>${this.getInitials(usuario.nombre)}</span>
                        </div>
                        <div>
                            <p class="mb-0 fw-bold fs-5">${usuario.nombre}</p>
                            <p class="text-muted small mb-0">${usuario.email}</p>
                            <span class="badge bg-${this.getRolColor(usuario.rol)} mt-1">${usuario.rol}</span>
                            <span class="badge ${usuario.activo ? 'bg-success' : 'bg-danger'} mt-1">${usuario.activo ? 'Activo' : 'Inactivo'}</span>
                        </div>
                    </div>
                    <p class="mb-1"><strong>Departamento:</strong> ${usuario.departamento || 'N/A'}</p>
                    ${usuario.rol === 'COMITE' && usuario.permisos ? this.renderPermisosResumen(usuario.permisos) : ''}
                </div>
            </div>`,
            'danger'
        );
        
        confirmModal.show();
        
        // Esperar confirmación
        const confirmed = await new Promise((resolve) => {
            const btnConfirm = document.getElementById('btnConfirmAction');
            const btnCancel = document.getElementById('btnCancelAction');
            
            btnConfirm.onclick = () => {
                confirmModal.hide();
                resolve(true);
            };
            
            btnCancel.onclick = () => {
                confirmModal.hide();
                resolve(false);
            };
        });
        
        if (!confirmed) return;
        
        try {
            // Mostrar loading
            this.showLoading(true);
            
            const response = await fetchAuth(`${API_URL}/auth/usuarios/${id}`, {
                method: 'DELETE'
            });
            
            showAlert('configAlertContainer', 'Usuario eliminado exitosamente', 'success');
            this.loadUsuarios();
        } catch (error) {
            console.error('Error al eliminar usuario:', error);
            showAlert('configAlertContainer', error.message || 'Error al eliminar usuario', 'danger');
        } finally {
            this.showLoading(false);
        }
    }
    
    // Renderizar resumen de permisos para confirmación
    renderPermisosResumen(permisos) {
        if (!permisos) return '';
        
        // Definir todos los permisos posibles
        const permisosConfig = [
            { key: 'anuncios', icon: 'bi-megaphone', title: 'Anuncios' },
            { key: 'gastos', icon: 'bi-credit-card', title: 'Gastos' },
            { key: 'presupuestos', icon: 'bi-calculator', title: 'Presupuestos' },
            { key: 'cuotas', icon: 'bi-cash-coin', title: 'Cuotas' },
            { key: 'usuarios', icon: 'bi-people', title: 'Usuarios' },
            { key: 'cierres', icon: 'bi-journal-check', title: 'Cierres' }
        ];
        
        // Contar permisos activos
        const permisosActivos = permisosConfig.filter(config => permisos[config.key]).length;
        
        let html = `
            <p class="mb-1"><strong>Permisos:</strong> ${permisosActivos} de ${permisosConfig.length}</p>
            <div class="d-flex flex-wrap gap-2 mt-2">
        `;
        
        // Generar badges para permisos activos
        permisosConfig.forEach(config => {
            if (permisos[config.key]) {
                html += `
                    <span class="badge bg-light text-dark">
                        <i class="bi ${config.icon} me-1"></i> ${config.title}
                    </span>
                `;
            }
        });
        
        html += '</div>';
        
        return html;
    }
    
    // Crear modal de confirmación personalizado
    createConfirmModal(title, message, details, type = 'warning') {
        // Verificar si el modal ya existe
        let confirmModalElement = document.getElementById('confirmActionModal');
        
        if (!confirmModalElement) {
            const modalHTML = `
                <div class="modal fade" id="confirmActionModal" tabindex="-1" aria-labelledby="confirmActionModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header bg-${type} text-white">
                                <h5 class="modal-title" id="confirmActionModalLabel"></h5>
                                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <p id="confirmActionMessage"></p>
                                <div id="confirmActionDetails"></div>
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary" id="btnCancelAction">Cancelar</button>
                                <button type="button" class="btn btn-${type}" id="btnConfirmAction">Confirmar</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            
            document.body.insertAdjacentHTML('beforeend', modalHTML);
            confirmModalElement = document.getElementById('confirmActionModal');
        }
        
        // Actualizar contenido
        document.getElementById('confirmActionModalLabel').textContent = title;
        document.getElementById('confirmActionMessage').innerHTML = message;
        document.getElementById('confirmActionDetails').innerHTML = details;
        
        // Actualizar clases de color
        const header = confirmModalElement.querySelector('.modal-header');
        header.className = `modal-header bg-${type} text-white`;
        
        const btnConfirm = document.getElementById('btnConfirmAction');
        btnConfirm.className = `btn btn-${type}`;
        
        return new bootstrap.Modal(confirmModalElement);
    }
    
    // Mostrar/ocultar loading
    showLoading(show) {
        const loadingElements = [
            document.getElementById('loadingUsuariosConfig'),
            document.getElementById('loadingUsuarios')
        ];
        
        loadingElements.forEach(element => {
            if (element) {
                element.style.display = show ? 'block' : 'none';
            }
        });
    }
    
    // Renderizar iconos de permisos para usuarios de comité
    renderPermisosIcons(permisos) {
        if (!permisos) return '';
        
        // Definir todos los permisos posibles con sus iconos y descripciones
        const permisosConfig = [
            { key: 'anuncios', icon: 'bi-megaphone', title: 'Gestión de Anuncios', description: 'Puede crear, editar y eliminar anuncios', color: 'primary' },
            { key: 'gastos', icon: 'bi-credit-card', title: 'Gestión de Gastos', description: 'Puede registrar y administrar gastos', color: 'success' },
            { key: 'presupuestos', icon: 'bi-calculator', title: 'Gestión de Presupuestos', description: 'Puede crear y administrar presupuestos', color: 'warning' },
            { key: 'cuotas', icon: 'bi-cash-coin', title: 'Gestión de Cuotas', description: 'Puede gestionar cuotas y pagos', color: 'info' },
            { key: 'usuarios', icon: 'bi-people', title: 'Gestión de Usuarios', description: 'Puede administrar usuarios del sistema', color: 'danger' },
            { key: 'cierres', icon: 'bi-journal-check', title: 'Gestión de Cierres', description: 'Puede realizar cierres contables', color: 'secondary' }
        ];
        
        // Crear contenedor con tooltip para mostrar resumen de permisos
        let icons = '<div class="mt-1 d-flex align-items-center">';
        
        // Contador de permisos activos
        let permisosActivos = 0;
        
        // Generar iconos para permisos activos
        permisosConfig.forEach(config => {
            if (permisos[config.key]) {
                permisosActivos++;
                icons += `<i class="bi ${config.icon} text-${config.color} me-1" 
                            data-bs-toggle="tooltip" 
                            data-bs-placement="top" 
                            title="${config.title}: ${config.description}"></i>`;
            }
        });
        
        // Mostrar resumen de permisos
        icons += `<span class="badge bg-success ms-1" 
                       data-bs-toggle="tooltip" 
                       data-bs-placement="top" 
                       title="Este usuario tiene ${permisosActivos} de ${permisosConfig.length} permisos activos">
                    ${permisosActivos}/${permisosConfig.length}
                  </span>`;
        
        // Botón para ver detalles completos
        icons += `<button class="btn btn-sm btn-outline-info ms-2" 
                         onclick="event.stopPropagation(); showPermisosDetails(${JSON.stringify(permisos).replace(/\"/g, '&quot;')})">
                    <i class="bi bi-eye-fill"></i>
                  </button>`;
        
        icons += '</div>';
        
        return icons;
    }
}

// Inicializar cuando el DOM esté cargado
document.addEventListener('DOMContentLoaded', function() {
    // Verificar si estamos en la página de admin
    const usuariosSection = document.getElementById('usuariosSection');
    const configuracionSection = document.getElementById('configuracionSection');
    
    if (usuariosSection || configuracionSection) {
        // Inicializar gestor de usuarios
        const usuariosManager = new UsuariosManager();
        usuariosManager.init();
        usuariosManager.loadUsuarios();
        
        // Exponer para uso global si es necesario
        window.usuariosManager = usuariosManager;
    }
});