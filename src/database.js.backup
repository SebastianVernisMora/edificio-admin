import sqlite3 from 'sqlite3';
import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { promisify } from 'util';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const sqlite = sqlite3.verbose();
const db = new sqlite.Database(join(__dirname, '../database.db'));

const run = promisify(db.run.bind(db));
const get = promisify(db.get.bind(db));
const all = promisify(db.all.bind(db));

await run(`
  CREATE TABLE IF NOT EXISTS usuarios (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    nombre TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,
    rol TEXT NOT NULL CHECK(rol IN ('admin', 'inquilino')),
    departamento TEXT,
    telefono TEXT,
    legitimidad_entregada BOOLEAN DEFAULT FALSE,
    estatus_validacion TEXT DEFAULT 'pendiente',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS presupuestos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    titulo TEXT NOT NULL,
    descripcion TEXT,
    monto_total REAL NOT NULL,
    fecha_inicio DATE,
    fecha_fin DATE,
    estado TEXT DEFAULT 'pendiente' CHECK(estado IN ('pendiente', 'aprobado', 'rechazado', 'ejecutado')),
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS items_presupuesto (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    presupuesto_id INTEGER NOT NULL,
    concepto TEXT NOT NULL,
    monto REAL NOT NULL,
    FOREIGN KEY (presupuesto_id) REFERENCES presupuestos (id)
  );

  CREATE TABLE IF NOT EXISTS cuotas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    usuario_id INTEGER NOT NULL,
    concepto TEXT NOT NULL,
    descripcion TEXT,
    monto REAL NOT NULL,
    tipo_cuota TEXT DEFAULT 'mensual',
    fecha_vencimiento DATE NOT NULL,
    pagado BOOLEAN DEFAULT FALSE,
    monto_pagado REAL DEFAULT 0,
    fecha_pago DATETIME,
    metodo_pago TEXT,
    comprobante_url TEXT,
    validado_por INTEGER,
    puede_parcialidades BOOLEAN DEFAULT FALSE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios (id),
    FOREIGN KEY (validado_por) REFERENCES usuarios (id)
  );

  CREATE TABLE IF NOT EXISTS mantenimientos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    titulo TEXT NOT NULL,
    descripcion TEXT,
    tipo TEXT NOT NULL,
    costo REAL DEFAULT 0,
    fecha_programada DATE,
    fecha_completada DATE,
    estado TEXT DEFAULT 'pendiente' CHECK(estado IN ('pendiente', 'en_progreso', 'completado', 'cancelado')),
    proveedor TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS proyectos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    titulo TEXT NOT NULL,
    descripcion TEXT,
    costo_estimado REAL,
    fecha_inicio DATE,
    fecha_fin_estimada DATE,
    fecha_fin_real DATE,
    estado TEXT DEFAULT 'planificacion' CHECK(estado IN ('planificacion', 'aprobado', 'en_ejecucion', 'completado', 'cancelado')),
    progreso INTEGER DEFAULT 0,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS anuncios (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    titulo TEXT NOT NULL,
    contenido TEXT NOT NULL,
    tipo TEXT DEFAULT 'general' CHECK(tipo IN ('general', 'urgente', 'mantenimiento', 'reunion')),
    autor_id INTEGER NOT NULL,
    activo BOOLEAN DEFAULT TRUE,
    fecha_expiracion DATE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (autor_id) REFERENCES usuarios (id)
  );

  CREATE TABLE IF NOT EXISTS solicitudes (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    usuario_id INTEGER NOT NULL,
    tipo TEXT NOT NULL,
    titulo TEXT NOT NULL,
    descripcion TEXT,
    prioridad TEXT DEFAULT 'media' CHECK(prioridad IN ('baja', 'media', 'alta', 'urgente')),
    estado TEXT DEFAULT 'pendiente' CHECK(estado IN ('pendiente', 'en_revision', 'aprobada', 'rechazada', 'completada')),
    respuesta TEXT,
    fecha_respuesta DATETIME,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios (id)
  );

  CREATE TABLE IF NOT EXISTS propuestas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    usuario_id INTEGER NOT NULL,
    titulo TEXT NOT NULL,
    descripcion TEXT NOT NULL,
    costo_estimado REAL,
    beneficios TEXT,
    votos_favor INTEGER DEFAULT 0,
    votos_contra INTEGER DEFAULT 0,
    estado TEXT DEFAULT 'abierta' CHECK(estado IN ('abierta', 'en_votacion', 'aprobada', 'rechazada', 'implementada')),
    fecha_limite_votacion DATE,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (usuario_id) REFERENCES usuarios (id)
  );

  CREATE TABLE IF NOT EXISTS votos_propuestas (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    propuesta_id INTEGER NOT NULL,
    usuario_id INTEGER NOT NULL,
    voto TEXT NOT NULL CHECK(voto IN ('favor', 'contra')),
    comentario TEXT,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    UNIQUE(propuesta_id, usuario_id),
    FOREIGN KEY (propuesta_id) REFERENCES propuestas (id),
    FOREIGN KEY (usuario_id) REFERENCES usuarios (id)
  );

  CREATE TABLE IF NOT EXISTS gastos (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    concepto TEXT NOT NULL,
    monto REAL NOT NULL,
    categoria TEXT NOT NULL,
    fecha_gasto DATE NOT NULL,
    proveedor TEXT,
    comprobante_url TEXT,
    origen_fondo TEXT DEFAULT 'fondo_operacional',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS cierres (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    periodo TEXT NOT NULL,
    tipo TEXT NOT NULL CHECK(tipo IN ('mensual', 'anual')),
    fecha_cierre DATETIME NOT NULL,
    ingresos REAL NOT NULL,
    egresos REAL NOT NULL,
    saldo REAL NOT NULL,
    detalles TEXT,
    estado TEXT DEFAULT 'completado',
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
  );

  CREATE TABLE IF NOT EXISTS parcialidades (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    cuota_id INTEGER NOT NULL,
    usuario_id INTEGER NOT NULL,
    monto REAL NOT NULL,
    metodo_pago TEXT,
    fecha_pago DATE NOT NULL,
    observaciones TEXT,
    validado_por INTEGER,
    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (cuota_id) REFERENCES cuotas (id),
    FOREIGN KEY (usuario_id) REFERENCES usuarios (id),
    FOREIGN KEY (validado_por) REFERENCES usuarios (id)
  );
`);

const dbWrapper = {
  run: run,
  get: get,
  all: all,
  prepare: (sql) => ({
    run: (...params) => run(sql, params),
    get: (...params) => get(sql, params),
    all: (...params) => all(sql, params)
  }),
  transaction: (fn) => {
    return async () => {
      await run('BEGIN TRANSACTION');
      try {
        const result = await fn();
        await run('COMMIT');
        return result;
      } catch (error) {
        await run('ROLLBACK');
        throw error;
      }
    };
  }
};

export default dbWrapper;